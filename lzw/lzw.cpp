#include <core/pch.hpp>
#include <core/noncopyable.hpp>

#include <streams/stream.hpp>

#include <streams/io_stream.hpp>

#include <streams/input_stream.hpp>
#include <streams/output_stream.hpp>

#include <streams/data_provider.hpp>
#include <streams/file_data_provider.hpp>
#include <streams/icu_file_data_provider.hpp>

#include <streams/input_byte_stream.hpp>
#include <streams/output_byte_stream.hpp>

#include <streams/input_bit_stream.hpp>
#include <streams/output_bit_stream.hpp>

#include <streams/input_codepoint_stream.hpp>
#include <streams/output_codepoint_stream.hpp>

#include <streams/input_string_stream.hpp>
#include <streams/output_string_stream.hpp>

#include <lzw/model.hpp>
#include <lzw/binary_model.hpp>
#include <lzw/codec.hpp>

USINGNAMESPACE(compression)

int main()
{
    //auto *test_data = L"1010011101111001010011110110101000011011001000011011101110010001101101001001111100100111101111111001111000010101011001111101010110111010110111110101101110101110101011110110000111000101101111110000110011101100101101100100101111001011111010011100100101101011111001101101011";
    auto *test_data = L"030600003300033021210210003012330031010102400033030213303011000002010110000200060020010000602531151004010220110011412002000003021003000001";
    //auto *test_data = L"0121182001000130113001000000000002102300110203440001001103130310112110020205030100003011250000011004000101000810010103001100021010002100201800012010";
    //auto *test_data
    //auto *test_data = L"101040030010000100301000020010101003001010000101005010100403020204010000000201010010020000020501002050";
    //auto *test_data = L"363333212121312333111243332133311211126216253115141221111412232131";
    //auto *test_data

    using integer_type = uint32_t;
    using model_type = lzw::binary_model<char_type, integer_type, string_type, uint16_t>;

    {
        std::shared_ptr<model_type> model(std::make_shared<model_type>());

        //(*model).codes().emplace(L"1",      0);
        //(*model).codes().emplace(L"11",     1);
        //(*model).codes().emplace(L"111",    2);
        //(*model).codes().emplace(L"2",      3);
        //(*model).codes().emplace(L"12",     4);
        //(*model).codes().emplace(L"21",     5);
        //(*model).codes().emplace(L"3",      6);
        //(*model).codes().emplace(L"4",      7);
        //(*model).codes().emplace(L"5",      8);
        //(*model).codes().emplace(L"6",      9);


        (*model).codes().emplace(L"0",      0);
        (*model).codes().emplace(L"1",      1);
        (*model).codes().emplace(L"00",     2);
        (*model).codes().emplace(L"01",     3);
        (*model).codes().emplace(L"10",     4);
        (*model).codes().emplace(L"000",    5);
        (*model).codes().emplace(L"001",    6);
        (*model).codes().emplace(L"010",    7);
        (*model).codes().emplace(L"100",    8);
        (*model).codes().emplace(L"110",    9);
        (*model).codes().emplace(L"111",    10);
        (*model).codes().emplace(L"0000",   11);
        (*model).codes().emplace(L"2",      12);
        (*model).codes().emplace(L"02",     13);
        (*model).codes().emplace(L"20",     14);
        (*model).codes().emplace(L"4",      15);
        (*model).codes().emplace(L"5",      16);
        (*model).codes().emplace(L"6",      17);
        (*model).codes().emplace(L"7",      18);
        (*model).codes().emplace(L"8",      19);
        (*model).codes().emplace(L"9",      20);

        //(*model).codes().emplace(L"0",      0);
        //(*model).codes().emplace(L"1",      1);
        //(*model).codes().emplace(L"00",     2);
        //(*model).codes().emplace(L"01",     3);
        //(*model).codes().emplace(L"10",     4);
        //(*model).codes().emplace(L"11",     5);
        //(*model).codes().emplace(L"001",    6);
        //(*model).codes().emplace(L"010",    7);
        //(*model).codes().emplace(L"100",    8);
        //(*model).codes().emplace(L"110",    9);
        //(*model).codes().emplace(L"111",    10);
        //(*model).codes().emplace(L"0000",   11);
        //(*model).codes().emplace(L"1111",   12);
        //(*model).codes().emplace(L"00000",  13);
        //(*model).codes().emplace(L"11111",  14);
        //(*model).codes().emplace(L"000000", 15);
        //(*model).codes().emplace(L"111111", 16);
        //(*model).codes().emplace(L"2",      17);
        //(*model).codes().emplace(L"22",     18);
        //(*model).codes().emplace(L"3",      19);
        //(*model).codes().emplace(L"4",      20);
        //(*model).codes().emplace(L"5",      21);
        //(*model).codes().emplace(L"6",      22);
        //(*model).codes().emplace(L"7",      23);
        //(*model).codes().emplace(L"8",      24);
        //(*model).codes().emplace(L"9",      25);

        using input_stream_type = input_string_stream<char_type>;
        std::shared_ptr<input_stream_type> input_stream(std::make_shared<input_stream_type>(test_data));

        for(const auto& ch : (*input_stream).data())
        {
            std::wcout << ch << L' ';
        }
        std::wcout << L':' << (*input_stream).data().size() << std::endl;
        //std::wcout << (*input_stream).data() << L':' << (*input_stream).data().size() << std::endl;

        //using output_stream_type = output_string_stream<file_data_provider>;
        //string_type file_name(LR"(d:\tmp\lzw.txt)");
        //auto fdp(std::make_shared<file_data_provider>(file_name, L"w+b"));
        //std::shared_ptr<output_stream_type> output_stream(std::make_shared<output_stream_type>(fdp));

        using output_stream_type = output_string_stream<char_type>;
        std::shared_ptr<output_stream_type> output_stream(std::make_shared<output_stream_type>());

        lzw::codec<char_type, integer_type, string_type, uint16_t, input_stream_type, output_stream_type> lzwc;

        std::size_t original_size;
        std::size_t encoded_size;

        bool rc1 = lzwc.encode(model, input_stream, output_stream, original_size, encoded_size);

        //(*fdp).rewind();
        //uint16_t code;
        //while((*fdp).get(code))
        //{
        //    std::cout << std::to_string(code) << ' ';
        //}
        for(auto ch : (*output_stream).data())
        {
            std::cout << ch << ' ';
        }
        std::wcout << std::endl;

        std::wcout << L"ORG:" << original_size << std::endl;
        std::wcout << L"ENC:" << encoded_size << std::endl << std::endl;

        std::vector<std::pair<string_type, uint16_t>> elems((*model).codes().begin(), (*model).codes().end());
        std::sort(elems.begin(), elems.end(), [](const auto& kvp1, const auto& kvp2)
        {
            return kvp1.second < kvp2.second;
        });

        for(const auto& kvp : elems)
        {
            std::wcout << kvp.first.c_str() << L',' << std::to_wstring(kvp.second) << std::endl;
        }

        //(*fdp).rewind();
    }
    {
        std::shared_ptr<model_type> model(std::make_shared<model_type>());

        (*model).codes().emplace(L"0", 0);
        (*model).codes().emplace(L"1", 1);
        //(*model).codes().emplace(L"2", 2);
        //(*model).codes().emplace(L"3", 3);
        //(*model).codes().emplace(L"4", 4);
        //(*model).codes().emplace(L"5", 5);
        //(*model).codes().emplace(L"6", 6);
        //(*model).codes().emplace(L"7", 7);
        //(*model).codes().emplace(L"8", 8);
        //(*model).codes().emplace(L"9", 9);

        using input_stream_type = input_byte_stream<file_data_provider>;
        string_type file_name(LR"(d:\tmp\lzw.txt)");
        auto fdp(std::make_shared<file_data_provider>(file_name, L"rb"));
        std::shared_ptr<input_stream_type> input_stream(std::make_shared<input_stream_type>(fdp));

        using output_stream_type = output_string_stream<char_type>;
        std::shared_ptr<output_stream_type> output_stream(std::make_shared<output_stream_type>());

        lzw::codec<char_type, integer_type, string_type, uint16_t, input_stream_type, output_stream_type> lzwc;

        std::size_t original_size;

        bool rc2 = lzwc.decode(model, input_stream, output_stream, original_size);
        std::wcout << (*output_stream).data() << L':' << (*output_stream).data().size() << std::endl;

        std::wcout << (rc2 && (test_data == (*output_stream).data()) ? L"ok" : L"error") << std::endl << std::endl;
    }
}


// 030600003300033021210210003012330031010102400033030213303011000002010110000200060020010000602531151004010220110011412002000003021003000001
// 10104   003  00100001003  0100002 0010101003  001010000101005    0101004   03  02 02 04   0100000002 0101001002 000002 05    01002 05    0
//  3 6    33   33 2121 21   3 1233  31 1 1 24   33 3 2133 3 11     2 1 11    2   6  2  1    6 2531151  4 1 22 11  11412  2     3 21  3     1

// 101040030010000100301000020010101003001010000101005010100403020204010000000201010010020000020501002050
// 363333212121312333111243332133311211126216253115141221111412232131

// 363333212121312333111243332133311211126216253115141221111412232131
// 0000000101010100003  00000010002 03  000100002 0101004   010000101
// 3633332 2 2 3 2333   243332 333  2   262 6253  5 4 22    4 2232 3

// 36333322232333243332333226262535422422323
// 0000003  010001000010002 010100002 02 010
// 363333   3 333 4333 333  6 6 5354  4  3 3



//101040030010000100301000020010101003001010000101005010100403020204010000000201010010020000020501002050000000010101010000300000010002030001000020101004010000101000000301000100001000201010000202010
//11431131211131111511432241211122512511113123121141113111211221



//146
//11120120331011100000200000140014001122032104011523021021011010010002010001201310020001010120041211330201600201220120007311100000170020012201100101
//  65 0.445
//  43 0.294
//  22 0.150
//   8 0.054
//   4 0.027
//     0.003
//
//0.445 0.294 0.150 0.054 0.027
//
//Entropy
//https://planetcalc.com/2476/
// https://planetcalc.com/9069/


